/* Generated by re2c 0.13.6 on Wed Jul 30 19:06:27 2014 */
#line 1 "as2transition/parser/Scanner.re2c"

#include <iostream>
#include <cstring>
#include "babb/utils/memory.h"
#include "memwrappers.h"

#include "as2transition/parser/Scanner.h"
#include "as2transition/parser/lemon_parser.h"

namespace u = babb::utils; 

namespace as2transition {
namespace parser {


Scanner::Scanner(std::istream& source, bool stopnewline)
	: _source(source), _stopnewline(stopnewline),
	  _buffer(NULL), _buff_sz(0), _cond(yycNORMAL),
	  _cursor(NULL), _limit(NULL), _marker(NULL), _token(NULL), _newline(false) {
	fill(256);
}

Scanner::~Scanner() {
	if (_buffer) delete[] _buffer;
}


int Scanner::readToken(ReferencedString*& token) {

	int ret;

	
#line 36 "<stdout>"
{
	char yych;
	switch (_cond) {
	case yycDBL_STRING: goto yyc_DBL_STRING;
	case yycNORMAL: goto yyc_NORMAL;
	case yycSGL_STRING: goto yyc_SGL_STRING;
	}
/* *********************************** */
yyc_DBL_STRING:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy4;
	case '\n':	goto yy3;
	case '"':	goto yy7;
	case '\\':	goto yy9;
	default:	goto yy6;
	}
yy3:
yy4:
	++_cursor;
yy5:
#line 69 "as2transition/parser/Scanner.re2c"
	{										goto yyc_DBL_STRING;				}
#line 61 "<stdout>"
yy6:
	yych = *++_cursor;
	goto yy5;
yy7:
	++_cursor;
#line 64 "as2transition/parser/Scanner.re2c"
	{ 
												  _cond = yycNORMAL; 
												  ret = T_STRING_LITERAL;	
												  goto re2c_finish;					
												}
#line 73 "<stdout>"
yy9:
	yych = *++_cursor;
	switch (yych) {
	case '"':	goto yy10;
	default:	goto yy5;
	}
yy10:
	++_cursor;
#line 63 "as2transition/parser/Scanner.re2c"
	{ 										goto yyc_DBL_STRING; 				}
#line 84 "<stdout>"
/* *********************************** */
yyc_NORMAL:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy15;
	case '\n':	goto yy14;
	case '"':	goto yy19;
	case '\'':	goto yy21;
	case '(':	goto yy23;
	case ')':	goto yy25;
	case ',':	goto yy27;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy31;
	case '~':	goto yy33;
	default:	goto yy17;
	}
yy14:
yy15:
	++_cursor;
#line 61 "as2transition/parser/Scanner.re2c"
	{ ret = T_EOF;							goto re2c_finish;					}
#line 168 "<stdout>"
yy17:
	++_cursor;
#line 91 "as2transition/parser/Scanner.re2c"
	{ ret = T_ERR_UNKNOWN_SYMBOL;			goto re2c_finish;					}
#line 173 "<stdout>"
yy19:
	++_cursor;
#line 59 "as2transition/parser/Scanner.re2c"
	{ _cond = yycDBL_STRING;				goto yyc_DBL_STRING;				}
#line 178 "<stdout>"
yy21:
	++_cursor;
#line 60 "as2transition/parser/Scanner.re2c"
	{ _cond = yycSGL_STRING;				goto yyc_SGL_STRING;				}
#line 183 "<stdout>"
yy23:
	++_cursor;
#line 56 "as2transition/parser/Scanner.re2c"
	{ ret = T_PAREN_L;						goto re2c_finish;					}
#line 188 "<stdout>"
yy25:
	++_cursor;
#line 57 "as2transition/parser/Scanner.re2c"
	{ ret = T_PAREN_R;						goto re2c_finish;					}
#line 193 "<stdout>"
yy27:
	++_cursor;
#line 54 "as2transition/parser/Scanner.re2c"
	{ ret = T_COMMA;						goto re2c_finish;					}
#line 198 "<stdout>"
yy29:
	++_cursor;
	yych = *_cursor;
	goto yy38;
yy30:
#line 53 "as2transition/parser/Scanner.re2c"
	{ ret = T_INTEGER;						goto re2c_finish;					}
#line 206 "<stdout>"
yy31:
	++_cursor;
	yych = *_cursor;
	goto yy36;
yy32:
#line 52 "as2transition/parser/Scanner.re2c"
	{ ret = T_IDENTIFIER;					goto re2c_finish;					}
#line 214 "<stdout>"
yy33:
	++_cursor;
#line 55 "as2transition/parser/Scanner.re2c"
	{ ret = T_TILDE;						goto re2c_finish;					}
#line 219 "<stdout>"
yy35:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
yy36:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy32;
	}
yy37:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
yy38:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy37;
	default:	goto yy30;
	}
/* *********************************** */
yyc_SGL_STRING:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy42;
	case '\n':	goto yy41;
	case '\'':	goto yy45;
	case '\\':	goto yy47;
	default:	goto yy44;
	}
yy41:
yy42:
	++_cursor;
yy43:
#line 83 "as2transition/parser/Scanner.re2c"
	{										goto yyc_SGL_STRING;				}
#line 326 "<stdout>"
yy44:
	yych = *++_cursor;
	goto yy43;
yy45:
	++_cursor;
#line 78 "as2transition/parser/Scanner.re2c"
	{ 
												  _cond = yycNORMAL; 
												  ret = T_STRING_LITERAL;	
												  goto re2c_finish;					
												}
#line 338 "<stdout>"
yy47:
	yych = *++_cursor;
	switch (yych) {
	case '\'':	goto yy48;
	default:	goto yy43;
	}
yy48:
	++_cursor;
#line 77 "as2transition/parser/Scanner.re2c"
	{ 										goto yyc_SGL_STRING; 				}
#line 349 "<stdout>"
}
#line 93 "as2transition/parser/Scanner.re2c"

re2c_finish:
	token = new ReferencedString();
	if (ret != T_EOF) {
		token->assign(_token, (size_t)(_cursor - _token));
	} else {
		token->assign("<EOF>");
	}

	return ret;
}

void Scanner::fill(size_t n) {

    char const* first = (_token < _marker) ? _token : _marker;

    size_t remaining = _limit - first;
    size_t req_sz = remaining + n;

    if (req_sz > _buff_sz) {
        // oh noes. need more buffer
        size_t new_sz = req_sz*2;
        char* new_buf = new char[new_sz];
        if (first) memcpy(new_buf, first, remaining);
        if (_buffer) delete[] _buffer;
        _buffer = new_buf;
        _buff_sz = new_sz;
        _limit = new_buf + new_sz;
    } else {
        // we can keep the buffer and shift the contents
        if (first && _buffer) memmove(_buffer, first, remaining);
    }

    size_t marker_offset = (size_t)(_marker - first);
    size_t token_offset = (size_t)(_token - first);
    size_t cursor_offset = (size_t)(_cursor - first);

    _cursor = _buffer + cursor_offset;
    _marker = _buffer + marker_offset;
    _token = _buffer + token_offset;

    // Fill the remainder of the buffer
    char* readpos = _buffer + remaining;
    int read_amount = _buff_sz - remaining;


	if (_stopnewline) {
		if (!_newline) {
			char c = _source.get();
			while (_source.good() && c && c != '\n' && read_amount) {
				*readpos++ = c; 
				read_amount--;
			}
			if (c == '\n') _newline = true;
		}

	} else {
		_source.read(readpos, read_amount);
		readpos += _source.gcount();
		read_amount -= _source.gcount();
	}

    // if we hit the end fill with EOF
    if (read_amount) {
        memset(readpos, '\0', read_amount);
  	}


    if (_source.fail() && !_source.eof()) {
        std::cerr << "ERROR: An error occurred while reading predicate stream." << std::endl;
    }


}

}}
