/* Generated by re2c 0.13.6 on Wed Jul 30 19:58:56 2014 */
#line 1 "as2transition/parser/Scanner.re2c"

#include <iostream>
#include <cstring>
#include "babb/utils/memory.h"
#include "memwrappers.h"

#include "as2transition/parser/Scanner.h"
#include "as2transition/parser/lemon_parser.h"

namespace u = babb::utils; 

namespace as2transition {
namespace parser {


Scanner::Scanner(std::istream& source, bool stopnewline)
	: _source(source), _stopnewline(stopnewline),
	  _buffer(NULL), _buff_sz(0), _cond(yycNORMAL),
	  _cursor(NULL), _limit(NULL), _marker(NULL), _token(NULL), _newline(false) {
	fill(256);
}

Scanner::~Scanner() {
	if (_buffer) delete[] _buffer;
}


int Scanner::readToken(ReferencedString*& token) {

	int ret;
	

re2c_start:
	_marker = _token = _cursor;
	
#line 39 "<stdout>"
{
	char yych;
	switch (_cond) {
	case yycDBL_STRING: goto yyc_DBL_STRING;
	case yycNORMAL: goto yyc_NORMAL;
	case yycSGL_STRING: goto yyc_SGL_STRING;
	}
/* *********************************** */
yyc_DBL_STRING:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy3;
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy10;
	case '"':	goto yy7;
	case '\\':	goto yy9;
	default:	goto yy5;
	}
yy3:
	++_cursor;
yy4:
#line 72 "as2transition/parser/Scanner.re2c"
	{										goto yyc_DBL_STRING;				}
#line 67 "<stdout>"
yy5:
	yych = *++_cursor;
	goto yy4;
yy6:
	yych = *++_cursor;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case ' ':	goto yy10;
	default:	goto yy4;
	}
yy7:
	++_cursor;
#line 67 "as2transition/parser/Scanner.re2c"
	{ 
												  _cond = yycNORMAL; 
												  ret = T_STRING_LITERAL;	
												  goto re2c_finish;					
												}
#line 89 "<stdout>"
yy9:
	yych = *++_cursor;
	switch (yych) {
	case '"':	goto yy13;
	default:	goto yy4;
	}
yy10:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case ' ':	goto yy10;
	default:	goto yy12;
	}
yy12:
#line 94 "as2transition/parser/Scanner.re2c"
	{ goto re2c_start; }
#line 111 "<stdout>"
yy13:
	++_cursor;
#line 66 "as2transition/parser/Scanner.re2c"
	{ 										goto yyc_DBL_STRING; 				}
#line 116 "<stdout>"
/* *********************************** */
yyc_NORMAL:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy17;
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy21;
	case '\n':	goto yy39;
	case '"':	goto yy23;
	case '\'':	goto yy25;
	case '(':	goto yy27;
	case ')':	goto yy29;
	case ',':	goto yy31;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy33;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	case '~':	goto yy37;
	default:	goto yy19;
	}
yy17:
	++_cursor;
#line 64 "as2transition/parser/Scanner.re2c"
	{ ret = T_EOF;							goto re2c_finish;					}
#line 203 "<stdout>"
yy19:
	++_cursor;
#line 96 "as2transition/parser/Scanner.re2c"
	{ ret = T_ERR_UNKNOWN_SYMBOL;			goto re2c_finish;					}
#line 208 "<stdout>"
yy21:
	++_cursor;
	yych = *_cursor;
	goto yy40;
yy22:
#line 94 "as2transition/parser/Scanner.re2c"
	{ goto re2c_start; }
#line 216 "<stdout>"
yy23:
	++_cursor;
#line 62 "as2transition/parser/Scanner.re2c"
	{ _cond = yycDBL_STRING;				goto yyc_DBL_STRING;				}
#line 221 "<stdout>"
yy25:
	++_cursor;
#line 63 "as2transition/parser/Scanner.re2c"
	{ _cond = yycSGL_STRING;				goto yyc_SGL_STRING;				}
#line 226 "<stdout>"
yy27:
	++_cursor;
#line 59 "as2transition/parser/Scanner.re2c"
	{ ret = T_PAREN_L;						goto re2c_finish;					}
#line 231 "<stdout>"
yy29:
	++_cursor;
#line 60 "as2transition/parser/Scanner.re2c"
	{ ret = T_PAREN_R;						goto re2c_finish;					}
#line 236 "<stdout>"
yy31:
	++_cursor;
#line 57 "as2transition/parser/Scanner.re2c"
	{ ret = T_COMMA;						goto re2c_finish;					}
#line 241 "<stdout>"
yy33:
	++_cursor;
	yych = *_cursor;
	goto yy44;
yy34:
#line 56 "as2transition/parser/Scanner.re2c"
	{ ret = T_INTEGER;						goto re2c_finish;					}
#line 249 "<stdout>"
yy35:
	++_cursor;
	yych = *_cursor;
	goto yy42;
yy36:
#line 55 "as2transition/parser/Scanner.re2c"
	{ ret = T_IDENTIFIER;					goto re2c_finish;					}
#line 257 "<stdout>"
yy37:
	++_cursor;
#line 58 "as2transition/parser/Scanner.re2c"
	{ ret = T_TILDE;						goto re2c_finish;					}
#line 262 "<stdout>"
yy39:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
yy40:
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case ' ':	goto yy39;
	default:	goto yy22;
	}
yy41:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
yy42:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy41;
	default:	goto yy36;
	}
yy43:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
yy44:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy43;
	default:	goto yy34;
	}
/* *********************************** */
yyc_SGL_STRING:
	if ((_limit - _cursor) < 2) fill(2);
	yych = *_cursor;
	switch (yych) {
	case 0x00:	goto yy47;
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy50;
	case '\n':	goto yy54;
	case '\'':	goto yy51;
	case '\\':	goto yy53;
	default:	goto yy49;
	}
yy47:
	++_cursor;
yy48:
#line 86 "as2transition/parser/Scanner.re2c"
	{										goto yyc_SGL_STRING;				}
#line 385 "<stdout>"
yy49:
	yych = *++_cursor;
	goto yy48;
yy50:
	yych = *++_cursor;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case ' ':	goto yy54;
	default:	goto yy48;
	}
yy51:
	++_cursor;
#line 81 "as2transition/parser/Scanner.re2c"
	{ 
												  _cond = yycNORMAL; 
												  ret = T_STRING_LITERAL;	
												  goto re2c_finish;					
												}
#line 407 "<stdout>"
yy53:
	yych = *++_cursor;
	switch (yych) {
	case '\'':	goto yy57;
	default:	goto yy48;
	}
yy54:
	++_cursor;
	if (_limit <= _cursor) fill(1);
	yych = *_cursor;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case ' ':	goto yy54;
	default:	goto yy56;
	}
yy56:
#line 94 "as2transition/parser/Scanner.re2c"
	{ goto re2c_start; }
#line 429 "<stdout>"
yy57:
	++_cursor;
#line 80 "as2transition/parser/Scanner.re2c"
	{ 										goto yyc_SGL_STRING; 				}
#line 434 "<stdout>"
}
#line 98 "as2transition/parser/Scanner.re2c"

re2c_finish:
	token = new ReferencedString();
	if (ret != T_EOF) {
		token->assign(_token, (size_t)(_cursor - _token));
	} else {
		token->assign("<EOF>");
	}

	return ret;
}

void Scanner::fill(size_t n) {

    char const* first = (_token < _marker) ? _token : _marker;

    size_t remaining = _limit - first;
    size_t req_sz = remaining + n;

    if (req_sz > _buff_sz) {
        // oh noes. need more buffer
        size_t new_sz = req_sz*2;
        char* new_buf = new char[new_sz];
        if (first) memcpy(new_buf, first, remaining);
        if (_buffer) delete[] _buffer;
        _buffer = new_buf;
        _buff_sz = new_sz;
        _limit = new_buf + new_sz;
    } else {
        // we can keep the buffer and shift the contents
        if (first && _buffer) memmove(_buffer, first, remaining);
    }

    size_t marker_offset = (size_t)(_marker - first);
    size_t token_offset = (size_t)(_token - first);
    size_t cursor_offset = (size_t)(_cursor - first);

    _cursor = _buffer + cursor_offset;
    _marker = _buffer + marker_offset;
    _token = _buffer + token_offset;

    // Fill the remainder of the buffer
    char* readpos = _buffer + remaining;
    int read_amount = _buff_sz - remaining;


	if (_stopnewline) {
		if (!_newline) {
			char c = _source.get();
			while (_source.good() && c && c != '\n' && read_amount) {
				*readpos++ = c; 
				read_amount--;
				c = _source.get();
			}
			if (c == '\n') _newline = true;
		}

	} else {
		_source.read(readpos, read_amount);
		readpos += _source.gcount();
		read_amount -= _source.gcount();
	}

    // if we hit the end fill with EOF
    if (read_amount) {
        memset(readpos, '\0', read_amount);
  	}


    if (_source.fail() && !_source.eof()) {
        std::cerr << "ERROR: An error occurred while reading predicate stream." << std::endl;
    }


}

}}
